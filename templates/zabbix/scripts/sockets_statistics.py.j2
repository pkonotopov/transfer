#!/usr/bin/python
import os
import psutil
import subprocess
import tempfile
from socket import AF_INET, SOCK_STREAM, SOCK_DGRAM
import socket

AF_INET6 = getattr(socket, 'AF_INET6', object())
PROTO_MAP = {
    (AF_INET, SOCK_STREAM): 'tcp',
    (AF_INET6, SOCK_STREAM): 'tcp6',
    (AF_INET, SOCK_DGRAM): 'udp',
    (AF_INET6, SOCK_DGRAM): 'udp6',
}

metrics = {}


def send_metrics():
    try:
        fd, path = tempfile.mkstemp()
        with os.fdopen(fd, 'w') as tmp:
            for key in metrics.keys():
                value = metrics[key]
                tmp.write("- {0} {1}\n".format(key, value))
        proc = subprocess.Popen([
            "/usr/bin/timeout", "-s", "9", "30s",
            "/usr/bin/zabbix_sender", "-vv", "-c", "/etc/zabbix/zabbix_agentd.conf", "-i", path
        ], stdout=subprocess.PIPE, shell=False)
        (out, err) = proc.communicate()

        if "Sending failed" in str(out):
            raise Exception(out)

    finally:
        try:
            os.remove(path)
        except:
            pass


def collect_data():
    for conn in psutil.net_connections():
        if conn.status == 'NONE':
            continue
        metric_key = "sockstat[{},{}]".format(PROTO_MAP[(conn.family, conn.type)], conn.status)
        if metric_key not in metrics:
            metrics[metric_key] = 1
        else:
            metrics[metric_key] += 1


# empty discovery data
print('{"data": []}')
collect_data()
send_metrics()
